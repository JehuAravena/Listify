-- PL ROLE UPDATE
USE BD_LISTIFY;
DROP PROCEDURE IF EXISTS PL_ROLE_UPDATE;
DELIMITER $$
CREATE PROCEDURE PL_ROLE_UPDATE (
    IN ROLE_ID_IN INT,
    IN ROLE_NAME_IN VARCHAR(50),
    IN ROLE_DESCRIPTION_IN VARCHAR(255),
    IN ROLE_ACTIVE_IN BOOLEAN,
    OUT STATUS_OUT INT,
    OUT ERROR_CODE_OUT VARCHAR(50),
    OUT ERROR_MESSAGE_OUT VARCHAR(200)
)

LABEL : BEGIN
    DECLARE P1 VARCHAR(100);
    DECLARE P2 VARCHAR(100);
    DECLARE RC INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1
        P1 = RETURNED_SQLSTATE, P2 = MESSAGE_TEXT;
        SET ERROR_CODE_OUT = 'PL-ROU-05';
        SET ERROR_MESSAGE_OUT = CONCAT(CONCAT('SQLSTATE: ',P1),CONCAT(' MESSAGE: ',P2));
        ROLLBACK;
    END;
    IF ROLE_ID_IN IS NULL THEN
        SET ERROR_CODE_OUT = 'PL_ROU_01';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_ROU_01' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    IF NOT EXISTS(SELECT * FROM ROLES WHERE RO_ID_ROLE = ROLE_ID_IN) THEN
        SET ERROR_CODE_OUT = 'PL_ROU_02';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_ROU_02' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    IF ROLE_ID_IN = 1 OR ROLE_ID_IN = 2 THEN
        SET ERROR_CODE_OUT = 'PL_ROU_03';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_ROU_03' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    IF EXISTS (SELECT * FROM ROLES WHERE RO_NAME = ROLE_NAME_IN AND RO_ID_ROLE <> ROLE_ID_IN) THEN
        SET ERROR_CODE_OUT = 'PL_ROU_04';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_ROU_04' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    START TRANSACTION;
    UPDATE ROLES
    SET
    RO_NAME = COALESCE(ROLE_NAME_IN, RO_NAME),
    RO_DETAIL = COALESCE(ROLE_DESCRIPTION_IN, RO_DETAIL),
    RO_ACTIVE = COALESCE(ROLE_ACTIVE_IN, RO_ACTIVE)
    WHERE RO_ID_ROLE = ROLE_ID_IN;
    SELECT ROW_COUNT() INTO RC;
    COMMIT;
    IF RC > 0 THEN
        SET STATUS_OUT = 1;
    ELSE
        SET STATUS_OUT = 0;
    END IF;
END$$
DELIMITER ;