-- PL UPDATE TASK
USE BD_LISTIFY;
DROP PROCEDURE IF EXISTS PL_TASK_UPDATE;
DELIMITER $$
CREATE PROCEDURE PL_TASK_UPDATE (
    IN ID_TASK_IN INT,
    IN TITLE_IN VARCHAR(50),
    IN DESCRIPTION_IN VARCHAR(255),
    IN PRIORITY_IN INT,
    IN STATUS_IN INT,
    OUT STATUS_OUT INT,
    OUT ERROR_CODE_OUT VARCHAR(50),
    OUT ERROR_MESSAGE_OUT VARCHAR(200)
)

LABEL:BEGIN

    DECLARE P1 VARCHAR(100);
    DECLARE P2 VARCHAR(100);
    DECLARE RC INT;
    DECLARE END_DATE DATE;
    DECLARE EXPERIENCE_POINTS INT;
    DECLARE USER_EXPERIENCE_POINTS INT;
    DECLARE USER_ID INT;
    DECLARE NEXT_LEVEL INT;
    DECLARE USER_LEVEL_NAME VARCHAR(50);
    DECLARE TASK_STATUS INT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1
        P1 = RETURNED_SQLSTATE, P2 = MESSAGE_TEXT;
        SET ERROR_CODE_OUT = 'PL-TAU-05';
        SET ERROR_MESSAGE_OUT = CONCAT(CONCAT('SQLSTATE: ',P1),CONCAT(' MESSAGE: ',P2));
        ROLLBACK;
    END;

    IF ID_TASK_IN IS NULL OR ID_TASK_IN = 0 THEN 
        SET ERROR_CODE_OUT = 'PL_TAU_01';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAU_01' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF NOT EXISTS (SELECT * FROM TASKS WHERE TA_ID_TASK = ID_TASK_IN) THEN
        SET ERROR_CODE_OUT = 'PL_TAU_02';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAU_02' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    SET TASK_STATUS = (SELECT TA_STATUS FROM TASKS WHERE TA_ID_TASK = ID_TASK_IN);
    IF TASK_STATUS = 1 THEN 
        SET ERROR_CODE_OUT = 'PL_TAU_03';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAU_03' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF PRIORITY_IN IS NOT NULL THEN
        IF PRIORITY_IN < 1 OR PRIORITY_IN > 3 THEN
            SET ERROR_CODE_OUT = 'PL_TAU_04';
            SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAU_04' INTO ERROR_MESSAGE_OUT;
            LEAVE LABEL;
        ELSE
            SET EXPERIENCE_POINTS = PRIORITY_IN * 10;
        END IF;
    ELSE
        SET EXPERIENCE_POINTS = (SELECT TA_EXPERIENCE_POINTS FROM TASKS WHERE TA_ID_TASK = ID_TASK_IN);
    END IF;

    IF STATUS_IN IS NOT NULL THEN
        SET END_DATE = NOW();
    END IF;

    SET USER_ID = (SELECT TA_ID_USER FROM TASKS WHERE TA_ID_TASK = ID_TASK_IN);
    
    IF STATUS_IN = 1 THEN
        SET USER_EXPERIENCE_POINTS = (SELECT US_EXPERIENCE FROM USERS WHERE US_ID_USER = USER_ID) + EXPERIENCE_POINTS;
        SET NEXT_LEVEL = (SELECT LE_ID_LEVEL FROM LEVELS WHERE LE_EXPERIENCE <= USER_EXPERIENCE_POINTS ORDER BY LE_EXPERIENCE DESC LIMIT 1);
        IF NEXT_LEVEL IS NOT NULL THEN
            SET USER_LEVEL_NAME = (SELECT LE_NAME FROM LEVELS WHERE LE_EXPERIENCE <= USER_EXPERIENCE_POINTS ORDER BY LE_EXPERIENCE DESC LIMIT 1); 
        END IF;
    END IF;

    START TRANSACTION;
        UPDATE TASKS
        SET
        TA_TITLE = COALESCE(TITLE_IN, TA_TITLE),
        TA_DESCRIPTION = COALESCE(DESCRIPTION_IN, TA_DESCRIPTION),
        TA_PRIORITY = COALESCE(PRIORITY_IN, TA_PRIORITY),
        TA_EXPERIENCE_POINTS = COALESCE(EXPERIENCE_POINTS, TA_EXPERIENCE_POINTS),
        TA_STATUS = COALESCE(STATUS_IN, TA_STATUS),
        TA_END_DATE = COALESCE(END_DATE, TA_END_DATE)
        WHERE TA_ID_TASK = ID_TASK_IN;
        UPDATE USERS
        SET 
        US_EXPERIENCE = COALESCE(USER_EXPERIENCE_POINTS, US_EXPERIENCE),
        US_LEVEL = COALESCE(NEXT_LEVEL, US_LEVEL),
        US_LEVEL_NAME = COALESCE(USER_LEVEL_NAME, US_LEVEL_NAME)
        WHERE US_ID_USER = USER_ID;
        SELECT ROW_COUNT() INTO RC;
    COMMIT;
    IF RC > 0 THEN
        SET STATUS_OUT = 1;
    ELSE
        SET STATUS_OUT = 0;
    END IF; 
END$$
DELIMITER ;