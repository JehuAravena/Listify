USE BD_LISTIFY;
DROP PROCEDURE IF EXISTS PL_LOGIN;
DELIMITER $$
CREATE PROCEDURE PL_LOGIN (
    IN EMAIL_IN VARCHAR(50),
    IN PASSWORD_IN VARCHAR(50),
    OUT ID_RESULT_OUT INT,
    OUT ERROR_CODE_OUT VARCHAR(10),
    OUT ERROR_MESSAGE_OUT VARCHAR(100)
)

LABEL:BEGIN
    DECLARE P1 VARCHAR(100);
    DECLARE P2 VARCHAR(100);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1
        P1 = RETURNED_SQLSTATE, P2 = MESSAGE_TEXT;
        SET ERROR_CODE_OUT = 'PL-LOG-05';
        SET ERROR_MESSAGE_OUT = CONCAT(CONCAT('SQLSTATE: ',P1),CONCAT(' MESSAGE: ',P2));
        ROLLBACK;
    END;
    IF EMAIL_IN IS NULL OR TRIM(EMAIL_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_LOG_01';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_LOG_01' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    IF PASSWORD_IN IS NULL OR TRIM(PASSWORD_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_LOG_02';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_LOG_02' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    IF NOT EXISTS (SELECT * FROM USERS WHERE US_EMAIL = EMAIL_IN) THEN
        SET ERROR_CODE_OUT = 'PL_LOG_03';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_LOG_03' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    IF NOT EXISTS (SELECT * FROM USERS WHERE US_EMAIL = EMAIL_IN AND US_PASSWORD = PASSWORD_IN) THEN
        SET ERROR_CODE_OUT = 'PL_LOG_04';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_LOG_04' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;
    START TRANSACTION;
    IF EXISTS (SELECT * FROM USERS WHERE US_EMAIL = EMAIL_IN AND US_PASSWORD = PASSWORD_IN AND US_ACTIVE = 0) THEN
        SET SQL_SAFE_UPDATES = 0;
        UPDATE USERS SET US_ACTIVE = 1 WHERE US_EMAIL = EMAIL_IN;
        SET SQL_SAFE_UPDATES = 1;
    END IF;
    SELECT US_ID_USER INTO ID_RESULT_OUT 
    FROM USERS
    WHERE US_EMAIL = EMAIL_IN AND US_PASSWORD = PASSWORD_IN;
    COMMIT;
END$$
DELIMITER ;