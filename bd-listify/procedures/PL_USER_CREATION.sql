USE BD_LISTIFY;
DROP PROCEDURE IF EXISTS PL_USER_CREATION;
DELIMITER $$
CREATE PROCEDURE PL_USER_CREATION (
    IN NAME_IN VARCHAR(50),
    IN NICKNAME_IN VARCHAR(50),
    IN LASTNAME_IN VARCHAR(50),
    IN EMAIL_IN VARCHAR(50),
    IN PASSWORD_IN VARCHAR(50),
    IN ID_ROLE_IN INT,
    OUT ID_RESULT_OUT INT,
    OUT ERROR_CODE_OUT VARCHAR(50),
    OUT ERROR_MESSAGE_OUT VARCHAR(200)
)

LABEL:BEGIN
    DECLARE P1 VARCHAR(100);
    DECLARE P2 VARCHAR(100);

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1
        P1 = RETURNED_SQLSTATE, P2 = MESSAGE_TEXT;
        SET ERROR_CODE_OUT = 'PL-USC-10';
        SET ERROR_MESSAGE_OUT = CONCAT(CONCAT('SQLSTATE: ',P1),CONCAT(' MESSAGE: ',P2));
        ROLLBACK;
    END;

    IF NAME_IN IS NULL OR TRIM(NAME_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_USC_01';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_01' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF NICKNAME_IN IS NULL OR TRIM(NICKNAME_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_USC_02';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_02' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF LASTNAME_IN IS NULL OR TRIM(LASTNAME_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_USC_03';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_03' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF EMAIL_IN IS NULL OR TRIM(EMAIL_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_USC_04';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_04' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF PASSWORD_IN IS NULL OR TRIM(PASSWORD_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_USC_05';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_05' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF ID_ROLE_IN IS NULL OR ID_ROLE_IN = 0 THEN 
        SET ERROR_CODE_OUT = 'PL_USC_06';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_06' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF EXISTS (SELECT * FROM USERS WHERE US_NICKNAME = NICKNAME_IN) THEN
        SET ERROR_CODE_OUT = 'PL_USC_07';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_07' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF EXISTS (SELECT * FROM USERS WHERE US_EMAIL = EMAIL_IN) THEN
        SET ERROR_CODE_OUT = 'PL_USC_08';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_08' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF NOT EXISTS (SELECT * FROM ROLES WHERE RO_ID_ROLE = ID_ROLE_IN) THEN
        SET ERROR_CODE_OUT = 'PL_USC_09';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_USC_09' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    START TRANSACTION;
    INSERT INTO `USERS` 
        (`US_ID_USER`,
        `US_NAME`,
        `US_NICKNAME`,
        `US_LASTNAME`,
        `US_EMAIL`,
        `US_PASSWORD`,
        `US_EXPERIENCE`,
        `US_LEVEL_NAME`,
        `US_LEVEL`,
        `US_ID_ROLE`,
        `US_ACTIVE`)
    VALUES (NULL,
        NAME_IN,
        NICKNAME_IN,
        LASTNAME_IN,
        EMAIL_IN,
        PASSWORD_IN,
        0,
        'A New Goal',
        1,
        ID_ROLE_IN,
        1
    );
    COMMIT;
    SELECT LAST_INSERT_ID() INTO ID_RESULT_OUT;
END$$
DELIMITER ;