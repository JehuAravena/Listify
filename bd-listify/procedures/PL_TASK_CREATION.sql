USE BD_LISTIFY;
DROP PROCEDURE IF EXISTS PL_TASK_CREATION;
DELIMITER $$
CREATE PROCEDURE PL_TASK_CREATION (
    IN TITLE_IN VARCHAR(50),
    IN DESCRIPTION_IN VARCHAR(255),
    IN PRIORITY_IN INT,
    IN ID_USER_IN INT,
    OUT ID_RESULT_OUT INT,
    OUT ERROR_CODE_OUT VARCHAR(50),
    OUT ERROR_MESSAGE_OUT VARCHAR(200)
)

LABEL:BEGIN
    DECLARE P1 VARCHAR(100);
    DECLARE P2 VARCHAR(100);
    DECLARE EXPERIENCE_POINTS INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1
		P1 = RETURNED_SQLSTATE, P2 = MESSAGE_TEXT;
        SET ERROR_CODE_OUT = 'PL-TAC-06';
		SET ERROR_MESSAGE_OUT = CONCAT(CONCAT('SQLSTATE: ',P1),CONCAT(' MESSAGE: ',P2));
		ROLLBACK;
    END;

    IF TITLE_IN IS NULL OR TRIM(TITLE_IN) = '' THEN 
        SET ERROR_CODE_OUT = 'PL_TAC_01';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAC_01' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF PRIORITY_IN IS NULL OR PRIORITY_IN = 0 THEN 
        SET ERROR_CODE_OUT = 'PL_TAC_02';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAC_02' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    ELSE
        SET EXPERIENCE_POINTS = PRIORITY_IN * 10;
    END IF;

    IF ID_USER_IN IS NULL OR ID_USER_IN = 0 THEN 
        SET ERROR_CODE_OUT = 'PL_TAC_03';
        SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAC_03' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF NOT EXISTS (SELECT * FROM USERS WHERE US_ID_USER = ID_USER_IN AND US_ACTIVE = TRUE) THEN
        SET ERROR_CODE_OUT = 'PL_TAC_04';
		SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAC_04' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    IF PRIORITY_IN < 1 OR PRIORITY_IN > 3 THEN
        SET ERROR_CODE_OUT = 'PL_TAC_05';
		SELECT ER_DESCRIPTION FROM ERRORS WHERE ER_CODE = 'PL_TAC_05' INTO ERROR_MESSAGE_OUT;
        LEAVE LABEL;
    END IF;

    START TRANSACTION;
    INSERT INTO TASKS
        (
        `TA_TITLE`,
        `TA_DESCRIPTION`,
        `TA_PRIORITY`,
        `TA_EXPERIENCE_POINTS`,
        `TA_STATUS`,
        `TA_CREATION_DATE`,
        `TA_END_DATE`,
        `TA_ID_USER`
        )
    VALUES(
        TITLE_IN,
        DESCRIPTION_IN,
        PRIORITY_IN,
        EXPERIENCE_POINTS,
        FALSE,
        NOW(),
        NULL,
        ID_USER_IN
    );
    COMMIT;
    SELECT LAST_INSERT_ID() INTO ID_RESULT_OUT;
END$$
DELIMITER ;